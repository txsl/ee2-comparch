define int sim_time
define int p0p
define int p1p
define int p2p
define int p3p
define int acbase
define int scont



scont = _RDWORD(9*4)
acbase = _RDWORD(8*4)

p0p = _RDWORD(scont+4)
p1p = _RDWORD(scont+8)
p2p = _RDWORD(scont+12)
p3p = _RDWORD(scont+16)
sim_time = _RDWORD(scont)


LA (PORT & 0x1) >> 0
LA (PORT & 0x100) >> 8
LA (PORT & 0x10000) >> 16
LA (PORT & 0x1000000) >> 24

LA (PORT & 0x8000) >> 15





signal void iofreq0(int period, int b) {
  int x;
  printf("period=%d, bit=%d\n", period,b);
  x = 0;
  twatch(100);
  while (1) {
    PORT = PORT ^ (1 << b);
    twatch (period/2);
	if ((PORT & (1 << b)	!= 0) && (period % 2 == 1)) twatch(1);
  }
}

signal void iofreq1(int period, int b) {
  int x;
  x = 0;
  twatch(100);
  while (1) {
    PORT = PORT ^ (1 << b);
    twatch (period/2);
	if ((PORT & (1 << b)	!= 0) && (period % 2 == 1)) twatch(1);
  }
}

signal void iofreq2(int period, int b) {
  int x;
  x = 0;
  twatch(100);
  while (1) {
    PORT = PORT ^ (1 << b);
    twatch (period/2);
	if ((PORT & (1 << b)	!= 0) && (period % 2 == 1)) twatch(1);
  }
}
	   
signal void iofreq3(int period, int b) {
  int x;
  x = 0;
  twatch(100);
  while (1) {
    PORT = PORT ^ (1 << b);
    twatch (period/2);
	if ((PORT & (1 << b)	!= 0) && (period % 2 == 1)) twatch(1);
  }
}

func void print_freq(int b, int cnt, int period)
{
   int err;
   float epercent;
   err = cnt - sim_time/period;
   if (err < 0) err = -err;
   epercent = (float) err*period*100.0 / sim_time;
   printf("Period:%d Port bit:%d\t\tcount:%d\t\terror:%d\t\tfractional error:%5.1f%%\n", period, b, cnt, err, epercent);
} 

signal void call_int(  int delaytime) {
  printf("Starting new...\n");
  twatch(sim_time + 75);
  PORT &= ~(1 << 15);
  printf("Interrupt!\n");
  rwatch(0x7f00);
  print_freq(0, _RDWORD(acbase), p0p);
  print_freq(8, _RDWORD(acbase+4), p1p);
  print_freq(16, _RDWORD(acbase+8), p2p);
  print_freq(24, _RDWORD(acbase+12), p3p);
  _break_ = 1;

}



iofreq0(p0p, 0);
iofreq1(p1p, 8);
iofreq2(p2p, 16);
iofreq3(p3p, 24);




call_int(sim_time);


